!function (e, r) { "object" == typeof exports && "object" == typeof module ? module.exports = r() : "function" == typeof define && define.amd ? define("00ricardo-utils", [], r) : "object" == typeof exports ? exports["00ricardo-utils"] = r() : e["00ricardo-utils"] = r() }(this, (() => (() => { "use strict"; var e = { d: (r, o) => { for (var t in o) e.o(o, t) && !e.o(r, t) && Object.defineProperty(r, t, { enumerable: !0, get: o[t] }) }, o: (e, r) => Object.prototype.hasOwnProperty.call(e, r), r: e => { "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(e, "__esModule", { value: !0 }) } }, r = {}; e.r(r), e.d(r, { default: () => a }); const o = e => null != e && ("object" == typeof e ? Array.isArray(e) ? e.length > 0 : Object.keys(e).length > 0 : "" !== e), t = e => e.filter(Boolean), n = e => { const r = e.split(/\s+/); for (let e = 0; e < r.length; e++)r[e] = r[e].replace(/^[^a-zA-Z0-9]+|[^a-zA-Z0-9]+$/g, ""); return t(r) }, a = { hasValue: o, removeElement: (e, r) => (e.splice(r, 1), e), removeProperty: (e, r) => (e.hasOwnProperty(r) && (Object.defineProperty(e, r, { configurable: !0, enumerable: !0, writable: !0, value: void 0 }), delete e[r]), e), hasProperty: (e, r) => e.hasOwnProperty(r), readFileInfo: e => { const r = new FileReader; return new Promise(((o, t) => { r.onload = () => { o({ name: e.name, type: e.type, size: e.size, base64: r.result }) }, r.onerror = t, r.readAsDataURL(e) })) }, removeEmptyElements: t, joinMapping: (e, r, o, t, n) => e.map((e => { const a = o.find((o => o[t] === e[r])); return { ...e, [n]: a[n] } })), getWords: n, searchFiltering: (e, r, t) => { const a = n(r); var i = []; if (o(t)) t.forEach((r => { a.forEach((o => { try { i = [...i, ...e.filter((e => e[r].toLowerCase().includes(o.toLowerCase())))] } catch (e) { console.warn("[00ricardo-utils] - This operation is not possible. Probably you're filtering based on a wrong Filter."), console.warn("[00ricardo-utils] - Please check the right properties.") } })) })); else try { a.forEach((r => { i = [...i, ...e.filter((e => e.toLowerCase().includes(r.toLowerCase())))] })) } catch (e) { console.warn("[00ricardo-utils] - This operation is not possible. Probably you're filtering an array of Objects and you must specify the filtering property."), console.warn("[00ricardo-utils] - Example: Title") } return i }, getUniqueValues: e => [...new Set(e)] }; return r })()));